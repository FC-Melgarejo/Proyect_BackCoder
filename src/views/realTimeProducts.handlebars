<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Crear Producto</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <style>
    /* Estilos CSS */

    /* ... */

  </style>
</head>
<body>
  <div class="form-container">
    <h1>Crear Producto</h1>

    <form id="productForm" enctype="multipart/form-data">
      <div>
        <label for="thumbnails">Imágenes:</label>
        <input type="file" id="thumbnails" name="thumbnails" accept="image/*" multiple required>
      </div>
      <div>
        <label for="title">Título:</label>
        <input type="text" id="title" name="title" required>
      </div>
      <div>
        <label for="description">Descripción:</label>
        <textarea id="description" name="description" required></textarea>
      </div>
      <div>
        <label for="price">Precio:</label>
        <input type="number" id="price" name="price" required>
      </div>
      <button type="submit" id="submitBtn">Agregar Producto</button>
    </form>
  </div>

  <script src="https://cdn.socket.io/4.3.1/socket.io.min.js"></script>
  <script>
    // Configuración de Socket.io
    const socket = io();

    // Obtén una referencia al formulario y al campo de imágenes
    const productForm = document.getElementById('productForm');
    const thumbnailsInput = document.getElementById('thumbnails');

    // Agrega un controlador de eventos al formulario
    productForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Evita el envío del formulario por defecto

      const formData = new FormData(productForm);
      const thumbnails = thumbnailsInput.files;

      // Crea un objeto que contiene los datos del producto, incluyendo las imágenes
      const productData = {
        title: formData.get('title'),
        description: formData.get('description'),
        price: formData.get('price'),
        // Resto de los campos del formulario
      };

      // Crea un objeto FormData para enviar los datos del formulario
      const formData = new FormData();
      formData.append('title', productData.title);
      formData.append('description', productData.description);
      formData.append('price', productData.price);
      for (let i = 0; i < thumbnails.length; i++) {
        formData.append('thumbnails', thumbnails[i]);
      }

      // Envía los datos del producto al servidor mediante AJAX
      fetch('/realtimeproduct', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        // Realiza las acciones necesarias después de agregar el producto
      })
      .catch(error => {
        console.error(error);
      });
    });

    // Maneja el evento 'productAdded' emitido por el servidor
    socket.on('productAdded', (newProduct) => {
      console.log('Producto agregado:', newProduct);
      // Realiza las acciones necesarias después de agregar el producto
    });
  </script>
</body>
</html>







